# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import my_proj_pb2 as my__proj__pb2


class MyServiceDataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        
        self.MyUnaryFun = channel.unary_unary(
                '/my_project_pkg.MyServiceData/MyUnaryFun',
                request_serializer=my__proj__pb2.MyRequest.SerializeToString,
                response_deserializer=my__proj__pb2.MyReply.FromString,
                )
        
        self.MyServerStreamingFun = channel.unary_stream(
                '/my_project_pkg.MyServiceData/MyServerStreamingFun',
                request_serializer=my__proj__pb2.MyRequest.SerializeToString,
                response_deserializer=my__proj__pb2.MyReply.FromString,
                )
        
        self.MyClientStreamingFun = channel.stream_unary(
                '/my_project_pkg.MyServiceData/MyClientStreamingFun',
                request_serializer=my__proj__pb2.MyRequest.SerializeToString,
                response_deserializer=my__proj__pb2.MyDelayedReply.FromString,
                )
        
        self.MyBothStreamingFun = channel.stream_stream(
                '/my_project_pkg.MyServiceData/MyBothStreamingFun',
                request_serializer=my__proj__pb2.MyRequest.SerializeToString,
                response_deserializer=my__proj__pb2.MyReply.FromString,
                )


class MyServiceDataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MyUnaryFun(self, request, context):
        """Unary"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyServerStreamingFun(self, request, context):
        """Server Streaming"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyClientStreamingFun(self, request_iterator, context):
        """Client Streaming"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyBothStreamingFun(self, request_iterator, context):
        """Both Streaming"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyServiceDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MyUnaryFun': grpc.unary_unary_rpc_method_handler(
                    servicer.MyUnaryFun,
                    request_deserializer=my__proj__pb2.MyRequest.FromString,
                    response_serializer=my__proj__pb2.MyReply.SerializeToString,
            ),
            'MyServerStreamingFun': grpc.unary_stream_rpc_method_handler(
                    servicer.MyServerStreamingFun,
                    request_deserializer=my__proj__pb2.MyRequest.FromString,
                    response_serializer=my__proj__pb2.MyReply.SerializeToString,
            ),
            'MyClientStreamingFun': grpc.stream_unary_rpc_method_handler(
                    servicer.MyClientStreamingFun,
                    request_deserializer=my__proj__pb2.MyRequest.FromString,
                    response_serializer=my__proj__pb2.MyDelayedReply.SerializeToString,
            ),
            'MyBothStreamingFun': grpc.stream_stream_rpc_method_handler(
                    servicer.MyBothStreamingFun,
                    request_deserializer=my__proj__pb2.MyRequest.FromString,
                    response_serializer=my__proj__pb2.MyReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'my_project_pkg.MyServiceData', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MyServiceData(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MyUnaryFun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/my_project_pkg.MyServiceData/MyUnaryFun',
            my__proj__pb2.MyRequest.SerializeToString,
            my__proj__pb2.MyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyServerStreamingFun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/my_project_pkg.MyServiceData/MyServerStreamingFun',
            my__proj__pb2.MyRequest.SerializeToString,
            my__proj__pb2.MyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyClientStreamingFun(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/my_project_pkg.MyServiceData/MyClientStreamingFun',
            my__proj__pb2.MyRequest.SerializeToString,
            my__proj__pb2.MyDelayedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyBothStreamingFun(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/my_project_pkg.MyServiceData/MyBothStreamingFun',
            my__proj__pb2.MyRequest.SerializeToString,
            my__proj__pb2.MyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
            
            
            
            
